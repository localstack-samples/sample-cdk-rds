name: Test Released Cloud Pods

on:
  #schedule: TODO activate
    # “At 00:00 on Saturday.”
  #  - cron: "0 0 * * 6"
  workflow_dispatch:
  push: # TODO remove
    paths-ignore:
      - 'README.md'
    branches:
      - cloudpod_workflow

jobs:
  get-releases:
    name: Retrieve Released Cloud Pods
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        output=$(gh api repos/$GITHUB_REPOSITORY/releases | jq  '[.[].tag_name]')
        output=$(echo $output | tr '\n' ' ')
        echo "matrix=$output" >> $GITHUB_OUTPUT
  
  test-pod-release:
    needs: get-releases
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        tag: ${{ fromJson(needs.get-releases.outputs.matrix) }}
        db: ['mariadb', 'mysql']
    steps:
      - name: Retrieve Pod
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # TODO the download url seems to follow the pattern $GITHUB_REPOSITORY/releases/download/{TAG}/{ASSET_NAME}
          # alternatively we can query the asset-id, and browser_download_url, but it seems like an overhead
          # asset_id=$(gh api repos/$GITHUB_REPOSITORY/releases/tags/latest | jq -r '.assets[]' | jq --arg DB $DB -c 'select(.name=="release-pod-\( $DB ).zip") | .id)
          # download_url=$(gh api repos/$GITHUB_REPOSITORY/releases/assets/$asset_id | jq -r ".browser_download_url")
          download_url="https://github.com/$GITHUB_REPOSITORY/releases/download/${{ matrix.tag }}/release-pod-${{ matrix.db }}.zip"
          curl -L $download_url --output release-pod.zip
          ls -la
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Dependencies
        run: |
          pip install localstack awscli-local
      - name: Start LocalStack
        env:
          LOCALSTACK_API_KEY: ${{ secrets.LOCALSTACK_API_KEY }}
          LOCALSTACK_VOLUME_DIR: ${{ github.workspace }}/ls_test
          MYSQL_FEATURE_FLAG: ${{ matrix.db }}
          DEBUG: 1 
          POD_LOAD_CLI_TIMEOUT: 300
        run: |
          mkdir ls_test
          ls -la ls_test
          docker pull localstack/localstack-pro:${{ matrix.tag }}
          # Start LocalStack in the background
          if [ "mysql" ==  ${MYSQL_FEATURE_FLAG} ]; then
            RDS_MYSQL_DOCKER=1 localstack start -d
          else
            localstack start -d
          fi
          # Wait 30 seconds for the LocalStack container to become ready before timing out
          echo "Waiting for LocalStack startup..."
          localstack wait -t 15
          echo "Startup complete"
      - name: Inject Pod
        run: |
          localstack pod load file://release-pod.zip
          state=$(awslocal rds describe-db-instances | jq -r ".DBInstances[0].DBInstanceStatus")
          while [ "$state" = creating ]; do
            sleep 1
            state=$(awslocal rds describe-db-instances | jq -r ".DBInstances[0].DBInstanceStatus")
          done
      - name: Run Smoke Tests
        run: |
          awslocal lambda invoke --cli-binary-format raw-in-base64-out --function-name my-lambda-rds-query-helper --payload '{"sqlQuery": "show tables", "secretName":"/rdsinitexample/rds/creds/mysql-01"}' output1
          echo "show tables:"
          cat output1
          awslocal lambda invoke --cli-binary-format raw-in-base64-out --function-name my-lambda-rds-query-helper --payload '{"sqlQuery": "select Author from Books", "secretName":"/rdsinitexample/rds/creds/mysql-01"}' output2
          echo "select Author from Books:"
          cat output2
          return_status1=$(cat output1 | jq -r .status)
          if [ "SUCCESS" !=  ${return_status1} ]; then
            echo "unexpected response for query1: ${return_status1}"
            cat output1
            exit 1
          fi
          return_status2=$(cat output2 | jq -r .status)
          if [ "SUCCESS" !=  ${return_status2} ]; then
            echo "unexpected response for query2: ${return_status2}"
            cat output2
            exit 1
          fi
      - name: Show Logs
        if: failure()
        run: |
          localstack logs
      # TODO add slack notification
      # add https://github.com/marketplace/actions/keepalive-workflow + adapt commit message https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs
